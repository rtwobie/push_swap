	1
	0
	7
5	6
3	4
9
11
	7
	6
	4
	1
	0

	12
	10
	7
	6
	4


move (pos_a=0, pos_b=4) -> cost = 2
move (pos_a=1, pos_b=0) -> cost = 2
move (pos_a=2, pos_b=2) -> cost = 3
move (pos_a=3, pos_b=2) -> cost = 4
move (pos_a=4, pos_b=2) -> cost = 4

move (pos_a=0, pos_b=2) -> cost = 2
move (pos_a=1, pos_b=3) -> cost = 2
move (pos_a=2, pos_b=0) -> cost = 3
move (pos_a=3, pos_b=0) -> cost = 4
move (pos_a=4, pos_b=0) -> cost = 4

move (pos_a=0, pos_b=4) -> cost = 2
move (pos_a=1, pos_b=0) -> cost = 2
move (pos_a=2, pos_b=2) -> cost = 3
move (pos_a=3, pos_b=1) -> cost = 4

move (pos_a=4, pos_b=2)
	direction (up, up)     -> cost = 5 = max(pos_a, pos_b) + 1
	direction (up, down)   -> cost = 8 = 4 + 3 + 1 = pos_a + (len_b - pos_b) + 1
	direction (down, up)   -> cost = 4 = 1 + 2 + 1 = (len_a - pos_a) + pos_b + 1
	direction (down, down) -> cost = 4 =    max(len_a - pos_a, len_b - pos_b) + 1
						max(4, 2) + 1 = 5
						max(1, 3) + 1 = 5

./push_swap 4 6 7 0 1 5 3 9 8 11

./push_swap 0 1 4 6 7 5 3 9 8 11

./push_swap 10 12 4 6 7 5 3 9 8 11

b_bot = lowest idx of b;

if (b.entry[pos_b].idx < b_entry[pos_b + 1].idx && idx_a > )
